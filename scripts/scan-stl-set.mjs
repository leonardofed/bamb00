// scan-stl-set.mjs â€” build grid-config.js from a folder of x-y-z.stl files
import fs from 'fs/promises'
import path from 'path'
import url from 'url'

const [, , setDirAbs, outConfigAbs] = process.argv
if (!setDirAbs || !outConfigAbs) {
  console.error('Usage: node scan-stl-set.mjs <ABS_SET_DIR> <ABS_grid-config.js>')
  process.exit(1)
}
const isAbs = p => path.isAbsolute(p)
if (!isAbs(setDirAbs) || !isAbs(outConfigAbs)) {
  console.error('Both arguments must be ABSOLUTE paths.')
  process.exit(1)
}

const dir = await fs.readdir(setDirAbs)
const triplets = []
for (const name of dir) {
  const m = name.match(/^(\d+)-(\d+)-(\d+)\.stl$/i)
  if (m) triplets.push(m.slice(1).map(n => parseInt(n, 10)))
}
if (!triplets.length) {
  console.error('No files like 0-0-0.stl found in:', setDirAbs)
  process.exit(1)
}

const maxX = Math.max(...triplets.map(t => t[0]))
const maxY = Math.max(...triplets.map(t => t[1]))
const maxZ = Math.max(...triplets.map(t => t[2]))
const countX = maxX + 1
const countY = maxY + 1
const countZ = maxZ + 1

// partsVis[x][y][z] boolean mask
const present = new Set(triplets.map(t => `${t[0]}-${t[1]}-${t[2]}`))
const partsVis = Array.from({ length: countX }, () =>
  Array.from({ length: countY }, () =>
    Array.from({ length: countZ }, (_, z) => false)
  )
)
for (let x = 0; x < countX; x++)
  for (let y = 0; y < countY; y++)
    for (let z = 0; z < countZ; z++)
      partsVis[x][y][z] = present.has(`${x}-${y}-${z}`)

const cfg = `// Auto-generated by scan-stl-set.mjs
var countX = ${countX};
var countY = ${countY};
var countZ = ${countZ};

var cropX = ${countX};
var cropY = ${countY};
var cropZ = ${countZ};

var partSizeX = ${1 / countX};
var partSizeY = ${1 / countY};
var partSizeZ = ${1 / countZ};

var partsVis = ${JSON.stringify(partsVis)};
`

await fs.writeFile(outConfigAbs, cfg, 'utf8')
console.log('Wrote', outConfigAbs)
console.log('counts:', { countX, countY, countZ })
